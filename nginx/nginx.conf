server {
    set $common_hostname "university-survey.webbrain.space";

    listen 80;
    server_name $common_hostname;
    return 301 https://$server_name$request_uri;
}

server {
    set $common_hostname "university-survey.webbrain.space";
    set $project_root "/home/brain/www/university-survey.webbrain.space";
    set $ssl_root "/etc/letsencrypt/live/university-survey.webbrain.space";

    set $cors_allowed_origins "university-survey\.webbrain\.space";
    set $cors_allowed_methods "GET, POST, PUT, DELETE, OPTIONS";
    set $cors_allowed_headers "Authorization,Chrome-bug,DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Pragma,Content-Type";
    set $cors_expose_headers "Content-Disposition";

    listen *:443 ssl http2;
    server_name $common_hostname;

    ssl_certificate ${ssl_root}/fullchain.pem;
    ssl_certificate_key ${ssl_root}/privkey.pem;

    ssl_protocols TLSv1.2;
    ssl_ecdh_curve secp384r1;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES256-SHA384;

    root ${project_root}/backend/backend/web;

    access_log ${project_root}/nginx/logs/backend-access.log;
    error_log ${project_root}/nginx/logs/backend-error.log;

    # Avoid clickjacking - don't allow the browser to render the page inside an frame or iframe
    add_header X-Frame-Options SAMEORIGIN;

    # Enables the Cross-site scripting (XSS) filter built into most recent web browsers.
    add_header X-XSS-Protection "1; mode=block";

    # Disable content-type sniffing on some browsers.
    add_header X-Content-Type-Options nosniff;

    # Control content of referrer headers
    add_header Referrer-Policy 'strict-origin-when-cross-origin';

    # Proxy settings
    proxy_buffer_size 128k;
    proxy_buffers 4 256k;
    proxy_busy_buffers_size 256k;
    proxy_connect_timeout 600;
    proxy_send_timeout 600;
    proxy_read_timeout 600;
    send_timeout 600;

    # Gzip settings
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript;

    # Proxy headers
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Real-Host $http_host;
    proxy_set_header X-Real-Port $server_port;

    # backend
    location /api/v1 {
        try_files $uri /index.php?$query_string;
    }
    location /index.php {
        if ($http_origin ~* ($cors_allowed_origins)) {
            set $cors "true";
        }

        if ($request_method = 'OPTIONS') {
            set $cors "${cors}options";
        }
        if ($request_method = 'GET') {
            set $cors "${cors}get";
        }
        if ($request_method = 'POST') {
            set $cors "${cors}post";
        }
        if ($request_method = 'PUT') {
            set $cors "${cors}put";
        }
        if ($request_method = 'DELETE') {
            set $cors "${cors}delete";
        }

        if ($cors = "trueget") {
            add_header 'Access-Control-Allow-Origin' "$http_origin";
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' "$cors_allowed_methods";
            add_header 'Access-Control-Allow-Headers' '$cors_allowed_headers';
            add_header 'Access-Control-Expose-Headers' "$cors_expose_headers";
        }
        if ($cors = "trueoptions") {
            add_header 'Access-Control-Allow-Origin' "$http_origin";
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' "$cors_allowed_methods";
            add_header 'Access-Control-Allow-Headers' "$cors_allowed_headers";
            add_header 'Access-Control-Expose-Headers' "$cors_expose_headers";

            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        if ($cors = "truepost") {
            add_header 'Access-Control-Allow-Origin' "$http_origin";
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' "$cors_allowed_methods";
            add_header 'Access-Control-Allow-Headers' "$cors_allowed_headers";
            add_header 'Access-Control-Expose-Headers' "$cors_expose_headers";
        }
        if ($cors = "trueput") {
            add_header 'Access-Control-Allow-Origin' "$http_origin";
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' "$cors_allowed_methods";
            add_header 'Access-Control-Allow-Headers' "$cors_allowed_headers";
            add_header 'Access-Control-Expose-Headers' "$cors_expose_headers";
        }
        if ($cors = "truedelete") {
            add_header 'Access-Control-Allow-Origin' "$http_origin";
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' "$cors_allowed_methods";
            add_header 'Access-Control-Allow-Headers' "$cors_allowed_headers";
            add_header 'Access-Control-Expose-Headers' "$cors_expose_headers";
        }

        include snippets/fastcgi-php.conf;

        fastcgi_read_timeout 600;
        fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;
    }

    # frontend
    location / {
        access_log ${project_root}/nginx/logs/frontend-access.log;
        error_log off;

        index index.html;
        try_files $uri $uri/ /index.html;

        root ${project_root}/frontend/public;
    }
    location /static {
        access_log off;
        error_log off;

        expires 7d;
        sendfile on;

        open_file_cache max=10000 inactive=20s;
        open_file_cache_valid 300s;
        open_file_cache_min_uses 5;

        root ${project_root}/frontend/public;
    }
}
